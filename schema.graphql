schema {
  query: RootQueryType
  mutation: RootMutationType
}

input CreateTicketInput {
  representativeId: ID
  status: TicketStatus
  subject: String!
}

"""The result of the :create_ticket mutation"""
type CreateTicketResult {
  """Any errors generated, if the mutation failed"""
  errors: [MutationError]

  """The successful result of the mutation"""
  result: Ticket
}

"""The result of the :destroy_ticket mutation"""
type DestroyTicketResult {
  """Any errors generated, if the mutation failed"""
  errors: [MutationError]

  """The record that was successfully deleted"""
  result: Ticket
}

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json

"""An error generated by a failed mutation"""
type MutationError {
  """An error code for the given error"""
  code: String

  """The field or fields that produced the error"""
  fields: [String]

  """The human readable error message"""
  message: String

  """A shorter error message, with vars not replaced"""
  shortMessage: String

  """Replacements for the short message"""
  vars: Json
}

type RootMutationType {
  createTicket(input: CreateTicketInput): CreateTicketResult
  destroyTicket(id: ID): DestroyTicketResult
  updateTicket(id: ID, input: UpdateTicketInput): UpdateTicketResult
}

type RootQueryType {
  getTicket(
    """The id of the record"""
    id: ID!
  ): Ticket
  listTickets(
    """A filter to limit the results"""
    filter: TicketFilterInput

    """How to sort the records in the response"""
    sort: [TicketSortInput]
  ): [Ticket!]!
}

enum SortOrder {
  ASC
  DESC
}

type Ticket {
  id: ID!
  representativeId: ID
  status: TicketStatus!
  subject: String!
}

input TicketFilterId {
  eq: ID
  greaterThan: ID
  greaterThanOrEqual: ID
  in: [ID!]
  isNil: Boolean
  lessThan: ID
  lessThanOrEqual: ID
  notEq: ID
}

input TicketFilterInput {
  and: [TicketFilterInput!]
  id: TicketFilterId
  or: [TicketFilterInput!]
  representativeId: TicketFilterRepresentativeId
  status: TicketFilterStatus
  subject: TicketFilterSubject
}

input TicketFilterRepresentativeId {
  eq: ID
  greaterThan: ID
  greaterThanOrEqual: ID
  in: [ID]
  isNil: Boolean
  lessThan: ID
  lessThanOrEqual: ID
  notEq: ID
}

input TicketFilterStatus {
  eq: TicketStatus
  greaterThan: TicketStatus
  greaterThanOrEqual: TicketStatus
  in: [TicketStatus!]
  isNil: Boolean
  lessThan: TicketStatus
  lessThanOrEqual: TicketStatus
  notEq: TicketStatus
}

input TicketFilterSubject {
  eq: String
  greaterThan: String
  greaterThanOrEqual: String
  in: [String!]
  isNil: Boolean
  lessThan: String
  lessThanOrEqual: String
  notEq: String
}

enum TicketSortField {
  ID
  REPRESENTATIVE_ID
  STATUS
  SUBJECT
}

input TicketSortInput {
  field: TicketSortField!
  order: SortOrder = ASC
}

enum TicketStatus {
  CLOSED
  OPEN
}

input UpdateTicketInput {
  representativeId: ID
  status: TicketStatus
  subject: String
}

"""The result of the :update_ticket mutation"""
type UpdateTicketResult {
  """Any errors generated, if the mutation failed"""
  errors: [MutationError]

  """The successful result of the mutation"""
  result: Ticket
}
